清空oa的假数据
编写详细的功能列表
录制操作视频

OA的公众号和后端的软著
OA的公众号和后端的代码复制65页 √
戴拿派克前端h5代码3页 √


13512265851 123456

15296385274 123456

王伟 42092219731015461X


律师证号分律师执业证号和律师资格证号 √
立案添加客户现住址+送达地址 √
当事人添加后不刷新【测试可以出现】
对方当事人可以手动输入【需要修改后端逻辑】【现有功能发生变化】×
消息通知重复审批【去掉消息通知中的审批功能】√
委托书、所函、合同识别不对
不会识别送达内容
代理词无法下载 √
无法修改入职时间 【测试可以修改】
修改密码收不到验证码 【测试可以收到】
提示迅杰【需要律师方自己购买短信服务】



a
a.b
a.b.c
a.b.c.d
a.b.c.d.e

SELECT * FROM `td_sys_function` WHERE perms LIKE "system.access%"

list

流程发起接口
http://127.0.0.1:48080/admin-api/bpm/process-instance/create
携带参数：
{
    "processDefinitionId": "tjl_bpm_overhaul_approve:2:20fbf415-c54d-11ed-9284-e0d04548e761",
    "variables": {
        "F5yi5y9r94a7b": "13243",
        "Fx7j5y9r94iia": "24354"
    }
}


###########################  导出excel  #################################
检修管理-创建任务 没有导出检修人员
检修管理-任务管理 没有导出检修人员
巡检管理-任务管理导出有问题



###########################  业务报表  #################################

巡检人员工时
	缺少阀门类型 【去掉】
	缺少位号（位号需要显示？）【去掉】
	维修编号是什么？【去掉】
	详情显示什么？查询每个人的每个巡检任务的各个阀门？
	导出也是？
巡检任务工时
	通过巡检人员查询和巡检人员工时有什么区别？【保持现有】
	巡检有维修编号吗？
	列表显示整个任务，那么显示哪个阀门类型？
	导出和详情的人员工时怎么算？
检修人员工时
	缺详情
检修任务工时
	根据任务查询，位号和阀门类型显示什么？
	
###########################  记录问题  #################################	
数据平台tjl模块中没有加@DS注解的模块
	- bpmdataapply
	- modeltype

数据平台缺少的菜单：
	数据存储管理 - 对象数据存储 ：刘晋玮 正在处理。目前增加一个子菜单“Redis”
	数据集合管理 - 数据集合 - 数据发布 ：这个稍后处理
	数据集合管理 - 数据目录 ：这个把“数据API”这个菜单挪过来
	数据清洗 - 数据清洗/数据清洗关联 ：这个目前是“清洗策略配置”的按钮，让刘晋玮改一下页面上按钮的文字。


36353761

###########################          工厂行政区域数据格式修改的SQL            #################################	
SELECT SUBSTRING(location, 2, 6), SUBSTRING(location, 9, 6), SUBSTRING(location, 16, 6),
CONCAT('["', SUBSTRING(location, 2, 6), '","', SUBSTRING(location, 9, 6), '","', SUBSTRING(location, 16, 6), '"]') result
FROM `tjl_factory`
WHERE location IS NOT NULL
AND location != 'null'
AND location != ''
AND SUBSTRING(location, 2, 1) != '"'

# ["110000","110100","110101"]

UPDATE tjl_factory
SET location = CONCAT('["', SUBSTRING(location, 2, 6), '","', SUBSTRING(location, 9, 6), '","', SUBSTRING(location, 16, 6), '"]')
WHERE location IS NOT NULL
AND location != 'null'
AND location != ''
AND SUBSTRING(location, 2, 1) != '"'

##############################################################################################


##################################         BUG修改            #######################################
检修管理-任务管理 
	启动时间是当前进行的任务的开始时间；
	提交时间是最新一条的结束时间；

SELECT
overhaul_process_record_id id, node_id, task_id, content, start_time, end_time, create_time, update_time, `status`
FROM `tjl_hi_task_process`
WHERE task_id = '384'
AND type = 0

 
SELECT
overhaul_process_record_id id, node_id, task_id, content, MIN(start_time) f_time, end_time, create_time, update_time, `status`
FROM `tjl_hi_task_process`
WHERE task_id = '384'
AND type = 0
GROUP BY node_id
ORDER BY create_time ASC

IFNULL(
NULL
,

)

创建运维团队成员，设置关联的系统账号，关联使用用户名关联（系统账号的用户名为唯一）
	创建：创建时选择了系统账号，则直接将系统账号的对应用户名录入，如果没有选择系统账号则需要先创建，创建系统账号需要验证用户名是否重复，默认使用运维团队成员的姓名创建。
	更新：更新运维团队成员信息修改绑定的系统账号，需要查询该系统账号下绑定了运维团队成员吗？（现在先不验证）


@潇潇  
1. 生成任务审批的时候 √
2.任务审核 √
3.人员审核通过 √
4.归档完成 √
生成一下检修任务报告

================================== 零代码 =================================================
管理端应用管理如何区分环境？

发布版本需要添加权限，【在管理端的菜单管理里手动添加】
新加的模型管理同上



=================保存模型接口参数
app-id: cwuu279ejaww
confirmed: true


{
    "metaTable": {
      "id": "1699592089730301952",
      "description": null,
      "dsKey": "cwuv1404y1hd",
      "titleTpl": null,
      "primaryField": "cwuv437j2add",
      "useSoftDelete": true,
      "synchronousFlag": true,
      "code": "table5",
      "name": "table5",
      "type": null,
      "nameField": null,
      "sort": null,
      "queryKey": "cwuv437e2hoh",
      "tableKey": null
    },
    "fields": [
      {
        "defaultValue": null,
        "tableKey": "cwuv437e2hoh",
        "description": "ID",
        "unique": null,
        "nullable": false,
        "config": null,
        "sort": 1,
        "fieldType": "bigint",
        "type": "INT",
        "code": "id",
        "name": null,
        "defaultValueMode": null,
        "comment": null,
        "foreignKeyFlag": false,
        "systemFieldType": "PRIMARY_KEY",
        "validations": null,
        "validationErrors": null,
        "queryKey": "cwuv437j2add",
        "id": "1699592089738690560",
        "createTime": "2023-09-07 09:15:06",
        "fieldTypeName": "整数",
        "label": "id",
        "value": "cwuv437j2add"
      },
      {
        "defaultValue": null,
        "tableKey": "cwuv437e2hoh",
        "description": "删除时间",
        "unique": null,
        "nullable": true,
        "config": null,
        "sort": 2,
        "fieldType": "timestamp(6)",
        "type": "DATETIME",
        "code": "deleteAt",
        "name": "删除时间",
        "defaultValueMode": null,
        "comment": null,
        "foreignKeyFlag": false,
        "systemFieldType": "DELETE_DATE",
        "validations": null,
        "validationErrors": null,
        "queryKey": "cwuv437o2329",
        "id": "1699592089747079168",
        "createTime": "2023-09-07 09:15:06",
        "fieldTypeName": "日期时间",
        "label": "deleteAt",
        "value": "cwuv437o2329"
      },
      {
        "defaultValue": null,
        "tableKey": "cwuv437e2hoh",
        "description": "测试的外键字段",
        "unique": null,
        "nullable": true,
        "config": {
            "enableSearch": false,
            "minValue": null
        },
        "sort": 2,
        "fieldType": "bigint",
        "type": "INT",
        "code": "table6s",
        "name": "table6s",
        "foreignKeyFlag": true,
        "fieldTypeName": "table6s"
      }
    ],
    "validators": [],
    "indexes": [],
    "foreignKeys": [
        {
            "tableKey": "cwuv437e2hoh",
            "code": "table6s",
            "name": "table60s",
            "relationMode" : "MORE_ONE",
            "targetKey": "cwuv437j2add",
            "description": "测试用的关联关系",
            "nullable": true,
            "cascadeRemove": false,
            "joinColumnAtTarget": false
        }
    ]
  }


=================== jsql =======================
public static void main(String[] args) {
        Table userTable = new Table("user").withAlias(new Alias("t1", false));
        Table classTable = new Table("class").withAlias(new Alias("t2", false));
        PlainSelect plainSelect = new PlainSelect().addSelectItems(new AllColumns()).withFromItem(userTable);
        System.out.println("before:" + plainSelect);

        // JOIN连接设置
        Join join = new Join();
        join.setLeft(true);
        join.withRightItem(classTable);
        // 创建连接条件
        EqualsTo joinEqual = new EqualsTo();
        joinEqual.setLeftExpression(new Column(userTable, "class_id"));
        joinEqual.setRightExpression(new Column(classTable, "id"));
        join.setOnExpressions(Collections.singletonList(joinEqual));
        plainSelect.addJoins(join);

        // 查询字段设置
        List<SelectItem> selectItemList = new ArrayList<>();
        SelectExpressionItem selectExpressionItem01 = new SelectExpressionItem();
        selectExpressionItem01.setExpression(new Column(classTable, "id AS classCode"));
        SelectExpressionItem selectExpressionItem02 = new SelectExpressionItem();
        selectExpressionItem02.setExpression(new Column(classTable, "class_name"));
        SelectExpressionItem selectExpressionItem03 = new SelectExpressionItem();
        selectExpressionItem03.setExpression(new Column(userTable, "id AS userCode"));
        SelectExpressionItem selectExpressionItem04 = new SelectExpressionItem();
        selectExpressionItem04.setExpression(new Column(userTable, "user_name"));
        selectItemList.add(selectExpressionItem01);
        selectItemList.add(selectExpressionItem02);
        selectItemList.add(selectExpressionItem03);
        selectItemList.add(selectExpressionItem04);

        // 相等表达式
        EqualsTo equalsTo = new EqualsTo();
        equalsTo.setLeftExpression(new Column(classTable, "class_id"));
        equalsTo.setRightExpression(new StringValue("288"));
        // 模糊匹配
        LikeExpression likeExpression = new LikeExpression();
        likeExpression.setLeftExpression(new Column(userTable, "user_name"));
        likeExpression.setRightExpression(new StringValue("张%"));
        // and表达式连接
        AndExpression andExpression = new AndExpression();
        andExpression.setLeftExpression(equalsTo);
        andExpression.setRightExpression(likeExpression);

        // 将where条件放入sql中
        plainSelect.setSelectItems(selectItemList);
        plainSelect.setWhere(andExpression);

        // 拼装后的sql
        System.out.println("after: " + plainSelect);
    }



文件配置表
id、name【默认】、code【自动生成的名称：default（名字叫default的是自动生成的不可以删除和修改）】必须是英文小写、remark、config、tenant_id、app_id、env、默认删除创建人等默认字段
bucket名称: default-dev、default-test、default-prod；界面不可以填写，根据code生成
说明：只有开发环境可以修改文件存储配置，按照创建时间正序排序


=====================  新任务（已完成）  ==============================

新建模块：liteflow-adapter，在yudao-framework模块下新建
编写服务编排转换逻辑


UPDATE `system_dept` SET dept_path = REPLACE(dept_path, 'wMe22.YZY1', 'wMe22.YZY2') WHERE dept_path LIKE 'wMe22.YZY1%'

=====================  新任务  ==============================

将发布版本从service中抽离出来



